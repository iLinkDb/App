@using IlinkDb.Entity
@model IlinkDb.Entity.Story
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Fred</title>
</head>
<body>
    <div id="msbMain">
        <div class='container'>
            <div id="msbLink"><a href="#">Stories</a></div>
            <div id="msbStories" class='row hide'>
                <div id='myStoryBuddy' class='span12'>
                    <div class='text-center'>
                        <span class='pull-left'><b>Stories</b>&nbsp;&nbsp;
                        <a id="addStory" class="icon-plus" title="Add new story" data-toggle="modal" href="#msbModalEdit" /></span>
                        (Everything below this line will <b>not</b> be displayed on the final site)
                    </div>
                    <div id='msbContent'>
                        <table id="stories" class="table table-striped table-hover table-condensed">
                            <thead>
                                <tr>
                                    <td>&nbsp;</td>
                                    <td>Id</td>
                                    <td>Name</td>
                                    <td>Estimate</td>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: storyViewModel.itemList">
                                <tr>
                                    <td width="20px">
                                        <a href="#msbModalEdit" data-bind="click: function (form) { editItem() }" data-toggle="modal" class='icon-pencil'></a>
                                    </td>
                                    <td data-bind="text: id"></td>
                                    <td class="item" data-bind="text: name"></td>
                                    <td data-bind="text: estimate"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal hide" id="msbModalEdit">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">×</button>
                <h3>Edit <span id="spnTitle"></span></h3>
            </div>

            <form id="msbFormEdit" data-bind="submit: function (form) { msb.PostEdit() }">
                <div class="modal-body">
                    <input type="hidden" name="ProjectId" value="830205" />

                    <ul id="storyTab" class="nav nav-tabs">
                        <li><a href="#edit" data-toggle="tab">Edit</a></li>
                        <li><a href="#task" data-toggle="tab">Tasks</a></li>
                        <li><a href="#comment" data-toggle="tab">Comments</a></li>
                    </ul>

                    <div class="tab-content">
                        <div class="tab-pane" id="edit">
                            @Html.LabelFor(m => m.Name)
                            @Html.TextBoxFor(m => m.Name)

                            @Html.LabelFor(m => m.Description)
                            @Html.TextAreaFor(m => m.Description, 4, 80, new { @class = "input-xxlarge" })

                            @Html.LabelFor(m => m.Estimate)
                            @Html.TextBoxFor(m => m.Estimate)

                            <input type="submit" class="btn btn-primary pull-right" value="Save" />
                        </div>
                        <div class="tab-pane" id="task">
                            <ul id="taskList">
                            </ul>
                        </div>
                        <div class="tab-pane" id="comment">comments for story</div>
                    </div>
                </div>

                <div class="modal-footer">
                    <a href="#" class="btn" data-dismiss="modal">Close</a>
                </div>
            </form>
        </div>
        @*        <div data-bind="text: ko.toJSON(storyViewModel)"></div>*@
    </div>


</body>

<script type='text/javascript'>

    if (typeof msb == 'undefined' || !msb) {
        msb = {};
    }

    msb.restHost = 'localhost:30441';
    msb.controller = 'story';
    msb.editStoryId = 0;
    msb.editTaskId = 0;

    msb.story = function (item) {
        am.TraceDir("msb.story", item);
        this.id = ko.observable(item.id);
        this.projectId = ko.observable(item.projectId);
        this.name = ko.observable(item.name);
        this.description = ko.observable(item.description);
        this.estimate = ko.observable(item.estimate);

        this.updateItem = function (item) {
            am.Trace("msb.updateItem");
            this.id(item.id);
            this.projectId(item.projectId);
            this.name(item.name);
            this.description(item.description);
            this.estimate(item.estimate);
        };

        this.editItem = function () {
            am.TraceDir("msb.editItem", this);
            var form = $('#msbFormEdit');

            form.data('story', this);
        };
    }

    var storyViewModel = {
        itemList: ko.observableArray([]),

        loadItemList: function () {
            var self = this;
            $.getJSON('http://' + msb.restHost + '/' + msb.controller + '/list?projectid=830205',
                function (itemList) {
                    self.itemList.removeAll();
                    $.each(itemList, function (index, item) {
                        am.TraceDir("pushing items:", item);
                        self.itemList.push(new msb.story(item));
                    });
                }
            );
        }
    };

    msb.PostEdit = function () {
        var form = $('#msbFormEdit');
        am.TraceDir("msb.PostEdit", form);
        //                if (!form.valid())
        //                    return;
        var json = JSON.stringify(msb.GetItemFromForm());

        // console.log('In PostEdit');

        var update = form.find("input[type='hidden'][id='id']").val();
        if (update == undefined) {
            update = false;
        }
        am.TraceDir("msb.PostEdit update: ", update);
        var httpVerb = !update ? "POST" : "PUT";

        var self = this;
        $.ajax({
            url: 'http://' + msb.restHost + '/' + msb.controller + '/' + httpVerb.toLowerCase(),
            type: httpVerb,
            data: json,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (jsonObject) {
                am.Trace("updateSuccess");
                if (update) {
                    var match = ko.utils.arrayFirst(storyViewModel.itemList(), function (item) {
                        return jsonObject.id === item.id();
                    });
                    match.updateItem(jsonObject);
                }
                else {
                    storyViewModel.itemList.push(new msb.story(jsonObject));
                }
                $('#msbModalEdit').modal('hide');
            }
        });
    }

    msb.GetItemFromForm = function () {
        var form = $('#msbFormEdit');
        var item = {};
        form.find('input[type!=submit],select,textarea').each(function () {
            am.Trace("msb.GetItemFromForm", this);
            item[this.name] = $(this).val();
        });
        return item;
    }

    $('#msbModalEdit').on('hide', function () {
        am.Trace("msbModalEdit onHide");
        var form = $('#msbFormEdit');
        form.validate().resetForm();
        form.get(0).reset();
        form.removeData('story');
        form.find("input[type='hidden'][id='id']").remove();
    });

    $('#msbModalEdit').on('show', function () {
        am.Trace("msbModalEdit onShow");
        var form = $('#msbFormEdit');
        var story = form.data('story');
        if (!story)
            return;

        am.TraceDir("story: ", story);
        $('<input>').attr('type', 'hidden').attr('id', 'id').attr('name', 'id')
            .val(story.id()).prependTo(form);

        // Update the form fields to be edited.
        form.find("#ProjectId").val(story.projectId());
        form.find('#Name').val(story.name());
        form.find('#Description').val(story.description());
        form.find('#Estimate').val(story.estimate());

        am.TraceDir("Dumping story:", story);

        msb.editStoryId = story.id();
        loadTasks();

        $("#spnTitle").html(story.name() + ' <span class="EditTitle">(' + story.id() + ')</span>');
    });

    function loadTasks() {
        am.TraceDir("loadTasks for story:", msb.editStoryId)
        msb.editTaskId = 0;
        $.ajax({
            url: 'http://' + msb.restHost + '/' + msb.controller + '/get/' + msb.editStoryId,
            success: showTasks,
            dataType: 'json'
        });
    }
    function showTasks(data) {
        am.TraceDir("showTasks", data);

        $("#taskList").empty();
        if (data.tasks != null) {
            for (var iLoop = 0; iLoop < data.tasks.length; iLoop++) {
                $("<li />", { text: data.tasks[iLoop].description, class: "liTaskEdit", id: "task-" + data.tasks[iLoop].id }).appendTo("#taskList");
            }
            $("<li />", { text: "Add New Task", class: "liTaskEdit liTaskAdd", id: "task-0" }).appendTo("#taskList");

            $(".liTaskEdit").click(editTask);
        }
    }

    function editTask() {

        am.TraceDir("editTask", this);
        var item = this;

        if (msb.editTaskId < 1) {
            msb.editTaskId = item.id.substring(5);
            am.TraceDir("item.id", msb.editTaskId);

            var text = item.innerHTML;
            if ($(item).hasClass("liTaskAdd")) {
                text = "";
            }

            var newLi = $("<li />").insertBefore(this);
            $("<textarea />", { id: 'txtTaskInput', width: '380px', value: text }).appendTo(newLi);
            $("<a />", { href: '#', id: 'btnSaveTask', class: 'icon-ok' }).appendTo(newLi);
            $("<a />", { href: '#', id: 'btnCancelTask', class: 'icon-remove' }).appendTo(newLi);

            $(this).remove();

            $("#btnCancelTask").click(function () { loadTasks(); });

            $("#btnSaveTask").click(function () {

                $.ajax({
                    type: "POST",
                    url: 'http://' + msb.restHost + '/Task/post',
                    data: {
                        id: msb.editTaskId,
                        description: $("#txtTaskInput").val(),
                        storyId: msb.editStoryId
                    },
                    success: loadTasks,
                    dataType: 'json'
                });
            });

        } else {
            alert("Please Save or cancel the current edit before editing this task");
        }
    }

    $(function () {
        $("#msbLink").click(function () {
            $(this).hide();
            $("#msbStories").slideDown('fast');

            am.Trace("ko.applyBindings for storyViewModel");
            ko.applyBindings(storyViewModel, document.getElementById("msbMain"));
            // ko.applyBindings(storyViewModel);
            storyViewModel.loadItemList();

            // Show the second tab.
            $('#storyTab li:eq(1) a').tab('show');
        });

        $("#addStory").click(function () {
            // Show the first tab.
            $('#storyTab li:eq(0) a').tab('show');
        });


        $('#msbModalEdit').modal({ "backdrop": "static", show: false });
    });

</script>
</html>
