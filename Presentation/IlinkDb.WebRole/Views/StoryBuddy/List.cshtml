@using IlinkDb.Entity
@model IlinkDb.Entity.Story
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Fred</title>
</head>
<body>
    <div id="msbMain">
        <div class='container'>
            <div id="msbLink"><a href="#">Stories</a></div>
            <div id="msbStories" class='row hide'>
                <div id='siteNotes' class='span12'>
                    <div class='text-center'>
                        <span class='pull-left'><b>Stories</b></span>
                        (Everything below this line will not be displaed on the live site)
                    </div>
                    <div id='msbContent'>
                        <table id="stories" class="table table-striped table-hover table-condensed">
                            <thead>
                                <tr>
                                    <td>&nbsp;</td>
                                    <td>Id</td>
                                    <td>Name</td>
                                    <td>Estimate</td>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: storyViewModel.itemList">
                                <tr>
                                    <td width="20px">
                                        <a href="#msbModalEdit" data-bind="click: function (form) { editItem() }" data-toggle="modal" class='icon-pencil'></a>
                                    </td>
                                    <td data-bind="text: id"></td>
                                    <td class="item" data-bind="text: name"></td>
                                    <td data-bind="text: estimate"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal hide" id="msbModalEdit">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">×</button>
                <h3>Edit Tenant</h3>
            </div>

            <form id="msbFormEdit" data-bind="submit: function (form) { msb.PostEdit() }">
                <div class="modal-body">
                    <input type="hidden" name="ProjectId" value="830205" />

                    @Html.LabelFor(m => m.Name)
                    @Html.TextBoxFor(m => m.Name)

                    @Html.LabelFor(m => m.Description)
                    @Html.TextAreaFor(m => m.Description, 4, 80, new { @class = "input-xxlarge" })

                    @Html.LabelFor(m => m.Estimate)
                    @Html.TextBoxFor(m => m.Estimate)

                </div>

                <div class="modal-footer">
                    <a href="#" class="btn" data-dismiss="modal">Cancel</a>
                    <input type="submit" class="btn btn-primary" value="Save" />
                </div>
            </form>
        </div>
    </div>
</body>

<script type='text/javascript'>

    if (typeof msb == 'undefined' || !msb) {
        msb = {};
    }

    msb.restHost = 'localhost:30441';
    msb.controller = 'story';

    msb.story = function (item) {
        console.log("trace: msb.story");
        this.id = ko.observable(item.id);
        this.projectId = ko.observable(item.projectId);
        this.name = ko.observable(item.name);
        this.description = ko.observable(item.description);
        this.estimate = ko.observable(item.estimate);

        this.updateItem = function (item) {
            console.log("trace: msb.updateItem");
            this.id(item.id);
            this.projectId(item.projectId);
            this.name(item.name);
            this.description(item.description);
            this.estimate(item.estimate);
        };

        this.editItem = function () {
            console.log("trace: msb.editItem");
            var form = $('#msbFormEdit');
            form.data('story', this);
        };
    }

    var storyViewModel = {
        itemList: ko.observableArray([]),

        loadItemList: function () {
            var self = this;
            $.getJSON('http://' + msb.restHost + '/' + msb.controller + '/list?projectid=830205',
                function (itemList) {
                    self.itemList.removeAll();
                    $.each(itemList, function (index, item) {
                        self.itemList.push(new msb.story(item));
                    });
                }
            );
        }
    };

    msb.PostEdit = function () {
        console.log("trace: msb.PostEdit");
        var form = $('#msbFormEdit');
        console.dir(form);
        //                if (!form.valid())
        //                    return;
        var json = JSON.stringify(msb.GetItemFromForm());

        // console.log('In PostEdit');

        var update = form.find("input[type='hidden'][id='id']").val();
        var httpVerb = !update ? "POST" : "PUT";

        var self = this;
        $.ajax({
            url: 'http://' + msb.restHost + '/' + msb.controller + '/' + httpVerb.toLowerCase(),
            type: httpVerb,
            data: json,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (jsonObject) {
                console.log("trace: updateSuccess");
                if (update) {
                    var match = ko.utils.arrayFirst(storyViewModel.itemList(), function (item) {
                        return jsonObject.id === item.id();
                    });
                    match.updateItem(jsonObject);
                }
                else {
                    storyViewModel.itemList.push(new tenant(jsonObject));
                }
                $('#msbModalEdit').modal('hide');
            }
        });
    }

    msb.GetItemFromForm = function () {
        console.log("trace: msb.GetItemFromForm");
        var form = $('#msbFormEdit');
        var item = {};
        form.find('input[type!=submit],select,textarea').each(function () {
            console.dir(this.name);
            item[this.name] = $(this).val();
        });
        return item;
    }

    $('#msbModalEdit').on('hide', function () {
        console.log("trace: onHide");
        var form = $('#msbFormEdit');
        form.validate().resetForm();
        form.get(0).reset();
        form.removeData('tenant');
        form.find("input[type='hidden'][id='id']").remove();
    });

    $('#msbModalEdit').on('show', function () {
        console.log("trace: onShow");
        var form = $('#msbFormEdit');
        var story = form.data('story');
        if (!story)
            return;

        console.dir(story);
        $('<input>').attr('type', 'hidden').attr('id', 'id').attr('name', 'id')
            .val(story.id()).prependTo(form);

        console.log('form show');
        // Update the form fields to be edited.
        form.find("#ProjectId").val(story.projectId());
        form.find('#Name').val(story.name());
        form.find('#Description').val(story.description());
        form.find('#Estimate').val(story.estimate());

    });

    $(function () {
        $("#msbLink").click(function () {
            $(this).hide();
            $("#msbStories").slideDown('fast');

            am.Trace("ko.applyBindings for storyViewModel");
            ko.applyBindings(storyViewModel, document.getElementById("msbMain"));
            // ko.applyBindings(storyViewModel);
            storyViewModel.loadItemList();

        });

        $('#msbModalEdit').modal({ "backdrop": "static", show: false });
    });

</script>
</html>
