@using IlinkDb.Entity

@{
    ViewBag.Title = "Index";
}

<div class="hero-unit">
    <h2>Tenants</h2>

    <div class="row">
        <div class="span2">
        </div>
        <div class="span4">
            <table id="tenants" class="table table-striped table-hover table-condensed">
                <thead>
                    <tr>
                        <td>&nbsp;</td>
                        <td>Id</td>
                        <td>Tenant</td>
                        <td>&nbsp;</td>
                    </tr>
                </thead>
                <tbody data-bind="foreach: viewModel.itemList">
                    <tr>
                        <td width="20px">
                            <a href="#modalEdit" data-bind="click: function (form) { editItem() }" data-toggle="modal" class='icon-pencil'></a>
                        </td>
                        <td data-bind="text: id"></td>
                        <td class="item" data-bind="text: domain"></td>
                        <td width="20px">
                            <a href="#modalDelete" data-bind="click: function (form) { deleteItem() }" data-toggle="modal" class='icon-remove'></a>
                        </td>
                    </tr>
                </tbody>
            </table>
<div class="pull-right">
    <a id="modalAdd" class="btn btn-success" data-toggle="modal" href="#modalEdit">Add Tenant</a>
</div>
        </div>
        <div class="span6">
        </div>
    </div>
</div>

<ul id="results"></ul>

@section scripts
{
    <style>
        #results li.pass { color: green; }
        #results li.fail { color: red; }

    </style>

    <script type='text/javascript'>
        var restHost = 'localhost:30441';
        var controller = 'tenant';

        function itemOne(itemOne) {
            // console.log('itemOne');
            this.id = ko.observable(itemOne.id);
            this.domain = ko.observable(itemOne.domain);

            @* STOP HERE - You should not need to edit anything below this line. *@

            this.editItem = function () {
                var form = $('#frmEdit');
                form.data('itemOne', this);
            };

            this.deleteItem = function () {
                var form = $('#frmDelete');
                form.data('itemOne', this);
            };

            this.updateItem = function (itemOne) {
                this.id(itemOne.id);
                this.domain(itemOne.domain);
            };
        }

        console.log('Declaring viewModel');

        var viewModel = {
            itemList: ko.observableArray([]),

            loadItemList: function () {
                var self = this;
                $.getJSON('http://' + restHost + '/' + controller + '/list',
                    function (itemList) {
                        self.itemList.removeAll();
                        $.each(itemList, function (index, item) {
                            self.itemList.push(new itemOne(item));
                        });
                    }
                );
            },

            _getItemFromForm: function (form) {
                form = $(form);
                var itemOne = {};
                form.find('input[type!=submit],select').each(function () {
                    itemOne[this.name] = $(this).val();
                });
                return itemOne;
            },

            postEdit: function (form) { am.PostEdit(form) },

            postDelete: function (form) {
                form = $(form);
                var json = JSON.stringify(this._getItemFromForm(form));

                var deleteId = form.find("input[type='hidden'][id='id']").val();

                var self = this;
                $.ajax({
                    url: 'http://' + restHost + '/' + controller + '/delete',
                    type: 'DELETE',
                    data: json,
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    success: function (success) {
                        if (success) {
                            var match = ko.utils.arrayFirst(self.itemList(), function (item) {
                                return deleteId == item.id();
                            });
                            self.itemList.remove(match);
                        }
                        $('#modalDelete').modal('hide');
                    }
                });
            }
        };

        $(function () {
            ko.applyBindings(viewModel);
            viewModel.loadItemList();

            am.assert(false, "Fail!");

            // Without these lines, the dialogs close when somebody clicks outside of them.
            $('#modalEdit').modal({ "backdrop": "static", show: false });
            $('#modalDelete').modal({ "backdrop": "static", show: false });
        });

    </script>
}

@{ Html.RenderPartial("Edit", new Tenant()); }
@{ Html.RenderPartial("Delete"); }

